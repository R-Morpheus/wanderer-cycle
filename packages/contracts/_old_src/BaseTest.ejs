// SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;

import { IUint256Component } from "solecs/interfaces/IUint256Component.sol";
import { World } from "solecs/World.sol";
import { getAddressById } from "solecs/utils.sol";

import { PRBTest } from "@prb/test/src/PRBTest.sol";

import { LibDeploy } from "../test/LibDeploy.sol";

// Components
<% components.forEach(({name, file}) => { -%>
import { <%= name %>, ID as <%= name %>ID } from "<%= file %>";
<% }) -%>

// Systems
<% systems.forEach(({name, file}) => { -%>
import { <%= name %>, ID as <%= name %>ID } from "<%= file %>";
<% }) -%>

abstract contract BaseTest is PRBTest {
  World world;

  address internal alice;
  address internal bob;

  IUint256Component components;
  IUint256Component systems;

<% const varName = (name) => name.charAt(0).toLowerCase() + name.slice(1); -%>
  // Components
<% components.forEach(({name}) => { -%>
  <%= name %> internal <%= varName(name) %>;
<% }) -%>

  // Systems
<% systems.forEach(({name}) => { -%>
  <%= name %> internal <%= varName(name) %>;
<% }) -%>

  function setUp() public virtual {
    alice = address(bytes20(keccak256("alice")));
    bob = address(bytes20(keccak256("bob")));

    // deploy world
    world = new World();
    world.init();

    LibDeploy.deploy(address(this), address(world), false);

    // Assign all systems and components to storage vars for convenience
    components = world.components();
    systems = world.systems();
    // Components
<% components.forEach(({name}) => { -%>
    <%= varName(name) %> = <%= name %>(getAddressById(components, <%= name %>ID));
<% }) -%>
    // Systems
<% systems.forEach(({name}) => { -%>
    <%= varName(name) %> = <%= name %>(getAddressById(systems, <%= name %>ID));
<% }) -%>
  }
}