// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { UriSystem } from "../../UriSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type UriSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "uri", name: "UriSystem" }))
UriSystemType constant uriSystem = UriSystemType.wrap(
  0x7379757269000000000000000000000055726953797374656d00000000000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title UriSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library UriSystemLib {
  error UriSystemLib_CallingFromRootSystem();

  function entityURI(UriSystemType self, bytes32 entity) internal view returns (string memory) {
    return CallWrapper(self.toResourceId(), address(0)).entityURI(entity);
  }

  function entityURI(CallWrapper memory self, bytes32 entity) internal view returns (string memory) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert UriSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_entityURI_bytes32.entityURI, (entity));
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (string));
  }

  function entityURI(RootCallWrapper memory self, bytes32 entity) internal view returns (string memory) {
    bytes memory systemCall = abi.encodeCall(_entityURI_bytes32.entityURI, (entity));

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    return abi.decode(result, (string));
  }

  function callFrom(UriSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(UriSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(UriSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(UriSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(UriSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (UriSystemType) {
    return UriSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(UriSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _entityURI_bytes32 {
  function entityURI(bytes32 entity) external;
}

using UriSystemLib for UriSystemType global;
using UriSystemLib for CallWrapper global;
using UriSystemLib for RootCallWrapper global;
