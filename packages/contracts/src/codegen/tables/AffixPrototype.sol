// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("AffixPrototype")));
bytes32 constant AffixPrototypeTableId = _tableId;

struct AffixPrototypeData {
  uint256 statmodProtoEntity;
  uint32 tier;
  uint32 requiredLevel;
  uint32 min;
  uint32 max;
}

library AffixPrototype {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](5);
    _schema[0] = SchemaType.UINT256;
    _schema[1] = SchemaType.UINT32;
    _schema[2] = SchemaType.UINT32;
    _schema[3] = SchemaType.UINT32;
    _schema[4] = SchemaType.UINT32;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.UINT256;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](5);
    _fieldNames[0] = "statmodProtoEntity";
    _fieldNames[1] = "tier";
    _fieldNames[2] = "requiredLevel";
    _fieldNames[3] = "min";
    _fieldNames[4] = "max";
    return ("AffixPrototype", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get statmodProtoEntity */
  function getStatmodProtoEntity(uint256 entity) internal view returns (uint256 statmodProtoEntity) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((entity)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 0);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get statmodProtoEntity (using the specified store) */
  function getStatmodProtoEntity(IStore _store, uint256 entity) internal view returns (uint256 statmodProtoEntity) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((entity)));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 0);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set statmodProtoEntity */
  function setStatmodProtoEntity(uint256 entity, uint256 statmodProtoEntity) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((entity)));

    StoreSwitch.setField(_tableId, _primaryKeys, 0, abi.encodePacked((statmodProtoEntity)));
  }

  /** Set statmodProtoEntity (using the specified store) */
  function setStatmodProtoEntity(IStore _store, uint256 entity, uint256 statmodProtoEntity) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((entity)));

    _store.setField(_tableId, _primaryKeys, 0, abi.encodePacked((statmodProtoEntity)));
  }

  /** Get tier */
  function getTier(uint256 entity) internal view returns (uint32 tier) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((entity)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 1);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get tier (using the specified store) */
  function getTier(IStore _store, uint256 entity) internal view returns (uint32 tier) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((entity)));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 1);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set tier */
  function setTier(uint256 entity, uint32 tier) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((entity)));

    StoreSwitch.setField(_tableId, _primaryKeys, 1, abi.encodePacked((tier)));
  }

  /** Set tier (using the specified store) */
  function setTier(IStore _store, uint256 entity, uint32 tier) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((entity)));

    _store.setField(_tableId, _primaryKeys, 1, abi.encodePacked((tier)));
  }

  /** Get requiredLevel */
  function getRequiredLevel(uint256 entity) internal view returns (uint32 requiredLevel) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((entity)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 2);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get requiredLevel (using the specified store) */
  function getRequiredLevel(IStore _store, uint256 entity) internal view returns (uint32 requiredLevel) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((entity)));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 2);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set requiredLevel */
  function setRequiredLevel(uint256 entity, uint32 requiredLevel) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((entity)));

    StoreSwitch.setField(_tableId, _primaryKeys, 2, abi.encodePacked((requiredLevel)));
  }

  /** Set requiredLevel (using the specified store) */
  function setRequiredLevel(IStore _store, uint256 entity, uint32 requiredLevel) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((entity)));

    _store.setField(_tableId, _primaryKeys, 2, abi.encodePacked((requiredLevel)));
  }

  /** Get min */
  function getMin(uint256 entity) internal view returns (uint32 min) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((entity)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 3);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get min (using the specified store) */
  function getMin(IStore _store, uint256 entity) internal view returns (uint32 min) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((entity)));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 3);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set min */
  function setMin(uint256 entity, uint32 min) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((entity)));

    StoreSwitch.setField(_tableId, _primaryKeys, 3, abi.encodePacked((min)));
  }

  /** Set min (using the specified store) */
  function setMin(IStore _store, uint256 entity, uint32 min) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((entity)));

    _store.setField(_tableId, _primaryKeys, 3, abi.encodePacked((min)));
  }

  /** Get max */
  function getMax(uint256 entity) internal view returns (uint32 max) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((entity)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 4);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get max (using the specified store) */
  function getMax(IStore _store, uint256 entity) internal view returns (uint32 max) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((entity)));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 4);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set max */
  function setMax(uint256 entity, uint32 max) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((entity)));

    StoreSwitch.setField(_tableId, _primaryKeys, 4, abi.encodePacked((max)));
  }

  /** Set max (using the specified store) */
  function setMax(IStore _store, uint256 entity, uint32 max) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((entity)));

    _store.setField(_tableId, _primaryKeys, 4, abi.encodePacked((max)));
  }

  /** Get the full data */
  function get(uint256 entity) internal view returns (AffixPrototypeData memory _table) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((entity)));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _primaryKeys, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, uint256 entity) internal view returns (AffixPrototypeData memory _table) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((entity)));

    bytes memory _blob = _store.getRecord(_tableId, _primaryKeys, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    uint256 entity,
    uint256 statmodProtoEntity,
    uint32 tier,
    uint32 requiredLevel,
    uint32 min,
    uint32 max
  ) internal {
    bytes memory _data = encode(statmodProtoEntity, tier, requiredLevel, min, max);

    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((entity)));

    StoreSwitch.setRecord(_tableId, _primaryKeys, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    uint256 entity,
    uint256 statmodProtoEntity,
    uint32 tier,
    uint32 requiredLevel,
    uint32 min,
    uint32 max
  ) internal {
    bytes memory _data = encode(statmodProtoEntity, tier, requiredLevel, min, max);

    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((entity)));

    _store.setRecord(_tableId, _primaryKeys, _data);
  }

  /** Set the full data using the data struct */
  function set(uint256 entity, AffixPrototypeData memory _table) internal {
    set(entity, _table.statmodProtoEntity, _table.tier, _table.requiredLevel, _table.min, _table.max);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, uint256 entity, AffixPrototypeData memory _table) internal {
    set(_store, entity, _table.statmodProtoEntity, _table.tier, _table.requiredLevel, _table.min, _table.max);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (AffixPrototypeData memory _table) {
    _table.statmodProtoEntity = (uint256(Bytes.slice32(_blob, 0)));

    _table.tier = (uint32(Bytes.slice4(_blob, 32)));

    _table.requiredLevel = (uint32(Bytes.slice4(_blob, 36)));

    _table.min = (uint32(Bytes.slice4(_blob, 40)));

    _table.max = (uint32(Bytes.slice4(_blob, 44)));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint256 statmodProtoEntity,
    uint32 tier,
    uint32 requiredLevel,
    uint32 min,
    uint32 max
  ) internal view returns (bytes memory) {
    return abi.encodePacked(statmodProtoEntity, tier, requiredLevel, min, max);
  }

  /* Delete all data for given keys */
  function deleteRecord(uint256 entity) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((entity)));

    StoreSwitch.deleteRecord(_tableId, _primaryKeys);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, uint256 entity) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32(uint256((entity)));

    _store.deleteRecord(_tableId, _primaryKeys);
  }
}
