// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("CycleCombatRReq")));
bytes32 constant CycleCombatRReqTableId = _tableId;

struct CycleCombatRReqData {
  uint256 mapEntity;
  uint32 connection;
  uint32 fortune;
  uint32[3] winnerPStats;
  uint32[3] loserPStats;
}

library CycleCombatRReq {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](5);
    _schema[0] = SchemaType.UINT256;
    _schema[1] = SchemaType.UINT32;
    _schema[2] = SchemaType.UINT32;
    _schema[3] = SchemaType.UINT32_ARRAY;
    _schema[4] = SchemaType.UINT32_ARRAY;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](5);
    _fieldNames[0] = "mapEntity";
    _fieldNames[1] = "connection";
    _fieldNames[2] = "fortune";
    _fieldNames[3] = "winnerPStats";
    _fieldNames[4] = "loserPStats";
    return ("CycleCombatRReq", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get mapEntity */
  function getMapEntity(bytes32 requestId) internal view returns (uint256 mapEntity) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 0);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get mapEntity (using the specified store) */
  function getMapEntity(IStore _store, bytes32 requestId) internal view returns (uint256 mapEntity) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 0);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set mapEntity */
  function setMapEntity(bytes32 requestId, uint256 mapEntity) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    StoreSwitch.setField(_tableId, _primaryKeys, 0, abi.encodePacked((mapEntity)));
  }

  /** Set mapEntity (using the specified store) */
  function setMapEntity(IStore _store, bytes32 requestId, uint256 mapEntity) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    _store.setField(_tableId, _primaryKeys, 0, abi.encodePacked((mapEntity)));
  }

  /** Get connection */
  function getConnection(bytes32 requestId) internal view returns (uint32 connection) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 1);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get connection (using the specified store) */
  function getConnection(IStore _store, bytes32 requestId) internal view returns (uint32 connection) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 1);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set connection */
  function setConnection(bytes32 requestId, uint32 connection) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    StoreSwitch.setField(_tableId, _primaryKeys, 1, abi.encodePacked((connection)));
  }

  /** Set connection (using the specified store) */
  function setConnection(IStore _store, bytes32 requestId, uint32 connection) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    _store.setField(_tableId, _primaryKeys, 1, abi.encodePacked((connection)));
  }

  /** Get fortune */
  function getFortune(bytes32 requestId) internal view returns (uint32 fortune) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 2);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get fortune (using the specified store) */
  function getFortune(IStore _store, bytes32 requestId) internal view returns (uint32 fortune) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 2);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set fortune */
  function setFortune(bytes32 requestId, uint32 fortune) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    StoreSwitch.setField(_tableId, _primaryKeys, 2, abi.encodePacked((fortune)));
  }

  /** Set fortune (using the specified store) */
  function setFortune(IStore _store, bytes32 requestId, uint32 fortune) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    _store.setField(_tableId, _primaryKeys, 2, abi.encodePacked((fortune)));
  }

  /** Get winnerPStats */
  function getWinnerPStats(bytes32 requestId) internal view returns (uint32[3] memory winnerPStats) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 3);
    return toStaticArray_uint32_3(SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /** Get winnerPStats (using the specified store) */
  function getWinnerPStats(IStore _store, bytes32 requestId) internal view returns (uint32[3] memory winnerPStats) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 3);
    return toStaticArray_uint32_3(SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /** Set winnerPStats */
  function setWinnerPStats(bytes32 requestId, uint32[3] memory winnerPStats) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    StoreSwitch.setField(_tableId, _primaryKeys, 3, EncodeArray.encode(fromStaticArray_uint32_3(winnerPStats)));
  }

  /** Set winnerPStats (using the specified store) */
  function setWinnerPStats(IStore _store, bytes32 requestId, uint32[3] memory winnerPStats) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    _store.setField(_tableId, _primaryKeys, 3, EncodeArray.encode(fromStaticArray_uint32_3(winnerPStats)));
  }

  /** Push an element to winnerPStats */
  function pushWinnerPStats(bytes32 requestId, uint32 _element) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    StoreSwitch.pushToField(_tableId, _primaryKeys, 3, abi.encodePacked((_element)));
  }

  /** Push an element to winnerPStats (using the specified store) */
  function pushWinnerPStats(IStore _store, bytes32 requestId, uint32 _element) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    _store.pushToField(_tableId, _primaryKeys, 3, abi.encodePacked((_element)));
  }

  /** Update an element of winnerPStats at `_index` */
  function updateWinnerPStats(bytes32 requestId, uint256 _index, uint32 _element) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    StoreSwitch.updateInField(_tableId, _primaryKeys, 3, _index * 4, abi.encodePacked((_element)));
  }

  /** Update an element of winnerPStats (using the specified store) at `_index` */
  function updateWinnerPStats(IStore _store, bytes32 requestId, uint256 _index, uint32 _element) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    _store.updateInField(_tableId, _primaryKeys, 3, _index * 4, abi.encodePacked((_element)));
  }

  /** Get loserPStats */
  function getLoserPStats(bytes32 requestId) internal view returns (uint32[3] memory loserPStats) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 4);
    return toStaticArray_uint32_3(SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /** Get loserPStats (using the specified store) */
  function getLoserPStats(IStore _store, bytes32 requestId) internal view returns (uint32[3] memory loserPStats) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    bytes memory _blob = _store.getField(_tableId, _primaryKeys, 4);
    return toStaticArray_uint32_3(SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint32());
  }

  /** Set loserPStats */
  function setLoserPStats(bytes32 requestId, uint32[3] memory loserPStats) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    StoreSwitch.setField(_tableId, _primaryKeys, 4, EncodeArray.encode(fromStaticArray_uint32_3(loserPStats)));
  }

  /** Set loserPStats (using the specified store) */
  function setLoserPStats(IStore _store, bytes32 requestId, uint32[3] memory loserPStats) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    _store.setField(_tableId, _primaryKeys, 4, EncodeArray.encode(fromStaticArray_uint32_3(loserPStats)));
  }

  /** Push an element to loserPStats */
  function pushLoserPStats(bytes32 requestId, uint32 _element) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    StoreSwitch.pushToField(_tableId, _primaryKeys, 4, abi.encodePacked((_element)));
  }

  /** Push an element to loserPStats (using the specified store) */
  function pushLoserPStats(IStore _store, bytes32 requestId, uint32 _element) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    _store.pushToField(_tableId, _primaryKeys, 4, abi.encodePacked((_element)));
  }

  /** Update an element of loserPStats at `_index` */
  function updateLoserPStats(bytes32 requestId, uint256 _index, uint32 _element) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    StoreSwitch.updateInField(_tableId, _primaryKeys, 4, _index * 4, abi.encodePacked((_element)));
  }

  /** Update an element of loserPStats (using the specified store) at `_index` */
  function updateLoserPStats(IStore _store, bytes32 requestId, uint256 _index, uint32 _element) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    _store.updateInField(_tableId, _primaryKeys, 4, _index * 4, abi.encodePacked((_element)));
  }

  /** Get the full data */
  function get(bytes32 requestId) internal view returns (CycleCombatRReqData memory _table) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _primaryKeys, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 requestId) internal view returns (CycleCombatRReqData memory _table) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    bytes memory _blob = _store.getRecord(_tableId, _primaryKeys, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 requestId,
    uint256 mapEntity,
    uint32 connection,
    uint32 fortune,
    uint32[3] memory winnerPStats,
    uint32[3] memory loserPStats
  ) internal {
    bytes memory _data = encode(mapEntity, connection, fortune, winnerPStats, loserPStats);

    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    StoreSwitch.setRecord(_tableId, _primaryKeys, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 requestId,
    uint256 mapEntity,
    uint32 connection,
    uint32 fortune,
    uint32[3] memory winnerPStats,
    uint32[3] memory loserPStats
  ) internal {
    bytes memory _data = encode(mapEntity, connection, fortune, winnerPStats, loserPStats);

    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    _store.setRecord(_tableId, _primaryKeys, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 requestId, CycleCombatRReqData memory _table) internal {
    set(requestId, _table.mapEntity, _table.connection, _table.fortune, _table.winnerPStats, _table.loserPStats);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 requestId, CycleCombatRReqData memory _table) internal {
    set(
      _store,
      requestId,
      _table.mapEntity,
      _table.connection,
      _table.fortune,
      _table.winnerPStats,
      _table.loserPStats
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal view returns (CycleCombatRReqData memory _table) {
    // 40 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 40));

    _table.mapEntity = (uint256(Bytes.slice32(_blob, 0)));

    _table.connection = (uint32(Bytes.slice4(_blob, 32)));

    _table.fortune = (uint32(Bytes.slice4(_blob, 36)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 40) {
      uint256 _start;
      // skip static data length + dynamic lengths word
      uint256 _end = 72;

      _start = _end;
      _end += _encodedLengths.atIndex(0);
      _table.winnerPStats = toStaticArray_uint32_3(SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint32());

      _start = _end;
      _end += _encodedLengths.atIndex(1);
      _table.loserPStats = toStaticArray_uint32_3(SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint32());
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint256 mapEntity,
    uint32 connection,
    uint32 fortune,
    uint32[3] memory winnerPStats,
    uint32[3] memory loserPStats
  ) internal view returns (bytes memory) {
    uint16[] memory _counters = new uint16[](2);
    _counters[0] = uint16(winnerPStats.length * 4);
    _counters[1] = uint16(loserPStats.length * 4);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return
      abi.encodePacked(
        mapEntity,
        connection,
        fortune,
        _encodedLengths.unwrap(),
        EncodeArray.encode(fromStaticArray_uint32_3(winnerPStats)),
        EncodeArray.encode(fromStaticArray_uint32_3(loserPStats))
      );
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 requestId) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    StoreSwitch.deleteRecord(_tableId, _primaryKeys);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 requestId) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((requestId));

    _store.deleteRecord(_tableId, _primaryKeys);
  }
}

function toStaticArray_uint32_3(uint32[] memory _value) pure returns (uint32[3] memory _result) {
  // in memory static arrays are just dynamic arrays without the length byte
  assembly {
    _result := add(_value, 0x20)
  }
}

function fromStaticArray_uint32_3(uint32[3] memory _value) view returns (uint32[] memory _result) {
  _result = new uint32[](3);
  uint256 fromPointer;
  uint256 toPointer;
  assembly {
    fromPointer := _value
    toPointer := add(_result, 0x20)
  }
  Memory.copy(fromPointer, toPointer, 96);
}
