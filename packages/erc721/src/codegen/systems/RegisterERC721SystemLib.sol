// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { RegisterERC721System } from "../../RegisterERC721System.sol";
import { ERC721MetadataData } from "@latticexyz/world-modules/src/modules/erc721-puppet/tables/ERC721Metadata.sol";
import { System } from "@latticexyz/world/src/System.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type RegisterERC721SystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "erc721-puppet", name: "RegisterERC721Sy" }))
RegisterERC721SystemType constant registerERC721System = RegisterERC721SystemType.wrap(
  0x73796572633732312d7075707065740052656769737465724552433732315379
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title RegisterERC721SystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library RegisterERC721SystemLib {
  error RegisterERC721SystemLib_CallingFromRootSystem();

  function registerERC721(
    RegisterERC721SystemType self,
    bytes14 namespace,
    ERC721MetadataData memory metadata
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).registerERC721(namespace, metadata);
  }

  function registerERC721(
    RegisterERC721SystemType self,
    bytes14 namespace,
    ERC721MetadataData memory metadata,
    System erc721System
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).registerERC721(namespace, metadata, erc721System);
  }

  function registerERC721(CallWrapper memory self, bytes14 namespace, ERC721MetadataData memory metadata) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert RegisterERC721SystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _registerERC721_bytes14_ERC721MetadataData.registerERC721,
      (namespace, metadata)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function registerERC721(
    CallWrapper memory self,
    bytes14 namespace,
    ERC721MetadataData memory metadata,
    System erc721System
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert RegisterERC721SystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _registerERC721_bytes14_ERC721MetadataData_System.registerERC721,
      (namespace, metadata, erc721System)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function registerERC721(RootCallWrapper memory self, bytes14 namespace, ERC721MetadataData memory metadata) internal {
    bytes memory systemCall = abi.encodeCall(
      _registerERC721_bytes14_ERC721MetadataData.registerERC721,
      (namespace, metadata)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function registerERC721(
    RootCallWrapper memory self,
    bytes14 namespace,
    ERC721MetadataData memory metadata,
    System erc721System
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _registerERC721_bytes14_ERC721MetadataData_System.registerERC721,
      (namespace, metadata, erc721System)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(RegisterERC721SystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(RegisterERC721SystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(RegisterERC721SystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(RegisterERC721SystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(RegisterERC721SystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (RegisterERC721SystemType) {
    return RegisterERC721SystemType.wrap(resourceId.unwrap());
  }

  function getAddress(RegisterERC721SystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _registerERC721_bytes14_ERC721MetadataData {
  function registerERC721(bytes14 namespace, ERC721MetadataData memory metadata) external;
}

interface _registerERC721_bytes14_ERC721MetadataData_System {
  function registerERC721(bytes14 namespace, ERC721MetadataData memory metadata, System erc721System) external;
}

using RegisterERC721SystemLib for RegisterERC721SystemType global;
using RegisterERC721SystemLib for CallWrapper global;
using RegisterERC721SystemLib for RootCallWrapper global;
